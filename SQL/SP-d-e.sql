
USE QLSVNhom;
GO




IF OBJECT_ID('SP_LOGIN_NHANVIEN', 'P') IS NOT NULL
    DROP PROCEDURE SP_LOGIN_NHANVIEN;
GO

CREATE PROCEDURE SP_LOGIN_NHANVIEN
    @MANV NVARCHAR(20),
    @MK NVARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @HashedPassword VARBINARY(20)
    SET @HashedPassword = HASHBYTES('SHA1', @MK);

    SELECT MANV, HOTEN, EMAIL, TENDN, PUBKEY
    FROM NHANVIEN
    WHERE MANV = @MANV AND MATKHAU = @HashedPassword;
END;
GO







-- DROP IF EXISTS + CREATE SP_GET_CLASSES
IF OBJECT_ID('SP_GET_CLASSES', 'P') IS NOT NULL
    DROP PROCEDURE SP_GET_CLASSES;
GO

CREATE PROCEDURE SP_GET_CLASSES
AS
BEGIN
    SET NOCOUNT ON;
    SELECT MALOP, TENLOP, MANV FROM LOP;
END;
GO









-- DROP IF EXISTS + CREATE SP_GET_STUDENTS_BY_CLASS
IF OBJECT_ID('SP_GET_STUDENTS_BY_CLASS', 'P') IS NOT NULL
    DROP PROCEDURE SP_GET_STUDENTS_BY_CLASS;
GO

CREATE PROCEDURE SP_GET_STUDENTS_BY_CLASS
    @MALOP NVARCHAR(20),
    @MANV NVARCHAR(20)  -- ✅ Logged-in employee ID
AS
BEGIN
    SET NOCOUNT ON;

    -- Only return students if this teacher manages the class
    IF EXISTS (
        SELECT 1 FROM LOP WHERE MALOP = @MALOP AND MANV = @MANV
    )
    BEGIN
        SELECT MASV, HOTEN, NGAYSINH, DIACHI, MALOP
        FROM SINHVIEN
        WHERE MALOP = @MALOP;
    END
    ELSE
    BEGIN
        RAISERROR('Access denied: you do not manage this class.', 16, 1);
    END
END;
GO







-- Drop if exists
IF OBJECT_ID('SP_INSERT_GRADE', 'P') IS NOT NULL
    DROP PROCEDURE SP_INSERT_GRADE;
GO

CREATE PROCEDURE SP_INSERT_GRADE
    @MASV VARCHAR(20),
    @MAHP VARCHAR(20),
    @DIEMTHI FLOAT,
    @MANV VARCHAR(20)  
AS
BEGIN
    SET NOCOUNT ON;

    
    DECLARE @ASYM_KEY_ID INT;
    SET @ASYM_KEY_ID = AsymKey_ID('AsymKey_NhanVien');  -- dùng chung Key mã hóa cho toàn hệ thống

    
    DECLARE @DIEMTHI_TEXT VARCHAR(50);
    SET @DIEMTHI_TEXT = CAST(@DIEMTHI AS VARCHAR(50));

   
    DECLARE @ENCRYPTED_SCORE VARBINARY(MAX);
    SET @ENCRYPTED_SCORE = EncryptByAsymKey(@ASYM_KEY_ID, @DIEMTHI_TEXT);

    
    INSERT INTO BANGDIEM (MASV, MAHP, DIEMTHI)
    VALUES (@MASV, @MAHP, @ENCRYPTED_SCORE);
END;
GO





-- Drop old procedure if exists
IF OBJECT_ID('SP_UPDATE_STUDENT_INFO', 'P') IS NOT NULL
    DROP PROCEDURE SP_UPDATE_STUDENT_INFO;
GO

-- Create new procedure
CREATE PROCEDURE SP_UPDATE_STUDENT_INFO
    @MASV NVARCHAR(20),
    @HOTEN NVARCHAR(100),
    @DIACHI NVARCHAR(200)
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE SINHVIEN
    SET HOTEN = @HOTEN,
        DIACHI = @DIACHI
    WHERE MASV = @MASV;
END;
GO










